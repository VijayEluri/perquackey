#!/usr/bin/env ruby

require 'fileutils'
require 'net/https'
require 'rexml/document'
require 'uri'

class Artifact
  def initialize(coordinates, contents)
    @coordinates = coordinates
    @contents = contents
  end

  def as_xml
    REXML::Document.new(@contents)
  end

  def write(mode)
    File.open(@coordinates.basename, mode) { |io| io.write @contents }
    @coordinates.basename
  end
end

class Coordinates
  attr_reader :group_id, :artifact_id

  def self.parse(string)
    group_id, artifact_id, version = string.split(':')

    new(
      group_id: group_id,
      artifact_id: artifact_id,
      version: version
    )
  end

  def self.parse_xml(dependency)
    packaging = if type_element = dependency.get_text('type')
                  type_element.value.to_sym
                else
                  :jar
                end

    new(
      group_id: dependency.get_text('groupId').value,
      artifact_id: dependency.get_text('artifactId').value,
      packaging: packaging,
      version: dependency.get_text('version').value
    )
  end

  def initialize(group_id:, artifact_id:, packaging: :jar, classifier: nil, version:)
    @group_id = group_id
    @artifact_id = artifact_id
    @packaging = packaging.to_s
    @classifier = classifier ? classifier.to_s : nil
    @version = version
  end

  def basename
    [@artifact_id, @version, @classifier].compact.join('-').concat('.').concat(@packaging)
  end

  def repository_path
    File.join(@group_id.gsub('.', '/'), @artifact_id, @version, basename)
  end

  def to_s
    [@group_id, @artifact_id, @packaging, @classifier, @version].compact.join(':')
  end

  def with(packaging: @packaging, classifier: @classifier)
    self.class.new(
      group_id: @group_id,
      artifact_id: @artifact_id,
      packaging: packaging,
      classifier: classifier,
      version: @version
    )
  end
end

class Project
  def initialize(coordinates)
    @coordinates = coordinates
  end

  def fetch(repository)
    pom = repository.get(@coordinates.with(packaging: :pom)).as_xml

    packaging = if packaging_element = pom.get_text('project/packaging')
                  packaging_element.value.to_sym
                else
                  :jar
                end

    dependencies = pom.get_elements('project/dependencies/dependency').map do |dependency|
      Project.new(Coordinates.parse_xml(dependency))
    end

    FileUtils.rm_rf(package_path)
    FileUtils.mkdir_p(package_path)

    Dir.chdir(package_path) do
      jar_name = repository.get(@coordinates.with(packaging: packaging)).write('wb')
      srcjar_name = repository.get(@coordinates.with(packaging: :jar, classifier: :sources)).write('wb')

      case packaging
      when :aar
        File.open('BUILD', 'w') do |io|
          io.puts <<~END
            licenses(["unencumbered"])

            aar_import(
              name = "#{@coordinates.artifact_id}",
              deps = #{dependencies.map(&:label).inspect},
              aar = "#{jar_name}",
              visibility = ["//visibility:public"],
            )
          END
        end
      when :jar
        File.open('BUILD', 'w') do |io|
          io.puts <<~END
            licenses(["unencumbered"])

            java_import(
              name = "#{@coordinates.artifact_id}",
              deps = #{dependencies.map(&:label).inspect},
              jars = ["#{jar_name}"],
              srcjar = "#{srcjar_name}",
              visibility = ["//visibility:public"],
            )
          END
        end
      else
        fail 'Huh?'
      end

    end

    dependencies.each do |project|
      project.fetch(repository)
    end
  end

  def label
    "//#{package_path}:#{@coordinates.artifact_id}"
  end

  private

  def package_path
    "third_party/#{@coordinates.group_id.gsub('.', '_')}_#{@coordinates.artifact_id.gsub('-', '_')}"
  end
end

class Repositories
  def initialize
    @repositories = [
      FileRepository.new(File.expand_path('../../third_party/android/sdk/extras/android/m2repository', __FILE__)),
      HttpRepository.new
    ]
  end

  def get(coordinates)
    @repositories.each do |repository|
      if artifact = repository.get(coordinates)
        return artifact
      end
    end

    fail "Artifact not found! #{coordinates}"
  end
end

class FileRepository
  def initialize(path)
    @path = path
  end

  def get(coordinates)
    path = File.join(@path, coordinates.repository_path)
    Artifact.new(coordinates, IO.read(path)) if File.exist?(path)
  end
end

class HttpRepository
  def initialize
    @http = Net::HTTP.new('repo1.maven.org', 443)
    @http.use_ssl = true
    @base = '/maven2'
  end

  def get(coordinates)
    request = Net::HTTP::Get.new(File.join(@base, coordinates.repository_path))
    response = @http.request(request)
    Artifact.new(coordinates, response.body) if response.kind_of?(Net::HTTPSuccess)
  end
end

if $0 == __FILE__
  Dir.chdir(File.expand_path('../..', __FILE__)) do
    Project.new(Coordinates.parse(ARGV.shift)).fetch(Repositories.new)
  end
end
